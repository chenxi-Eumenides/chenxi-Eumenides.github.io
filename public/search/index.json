[{"content":"笔记 python3安装 mc服务器 rtmp直播推流 泰拉瑞亚服务器 git kindle越狱 编程 rust学习 学习 考公 网上报课 论文 周记 ","date":"2023-05-06T04:36:21+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/todo-list/","title":"Todo List"},{"content":"背景 我大学时期有一台笔记本电脑y7000 2019，在我购买台式电脑后，就不用了。\n放在那也是浪费，性能也还算不错，打算将其改为nas，或者兼顾家庭服务器的角色。\n本人在动手这一块是完全的小白，也不知道能不能成，试试再说。\n配置 Y7000 2019\nCPU：i7-9750H GPU：1660ti RAM：32G 显示屏：1080p60hz 网卡：ac9560ngw 接口 网口：2.4g usb：5gps*3 hdmi：2.0 供电：联想方口200w 改造思路 先拆开笔记本，进行一些清灰和换硅脂的标准操作，看一下基本结构\n主板开机键在背面，原先是由键盘上方中心位置的按键触发，改装后需要考虑如何启动。\n方案一是来电自启，这样可以用电源去控制。\n方案二是将按键露在外侧，或者安装一个直接接触的按钮。\n不打算接线到其他位置，技术不够。\n主板改装 主板本身是异形的，左侧接口由小板引出。\n笔记本主板改塔式散热比较困难，至少对于我这样的小白来说，根本不可能。所以原本的散热装置保留，本身散热就是足够的，再在主板的对面安装一个风扇，应该就可以了。\n主板上有原生的一个m2nevme接口，可以购买m2nvme转6sata转接板使用。再加上原生的一个sata接口，总计7个sata接口，对于我来说是足够了。\nnvme固态和sata固态有差距，但对于我来说，区别不是很大。\n主板上有wifi网卡，m2接口，可拆下，毕竟nas使用有线网口就足够了。淘宝上可购买m2wifi转2口sata，这样就多了2个sata接口口。\n供电改装 首先要考虑如何供电。主板本身使用的是20v11.5A的电源，这个电压并不常见，特别是要作为nas使用。机械硬盘使用的是12v和5v，固态使用的是3.3v和5v。\n方案一是主板使用原装电源板砖，再外带一个pc电源给硬盘固态使用。这样简单，但两个电源比较累赘，控制也不方便。\n方案二是主板使用12v升压20v模块。由于淘宝上没有pc电源接口直接转联想方口的配件，所以需要将pc电源12pin接口转12vDC，再接升压模块变为20vDC，再接DC接口转联想方口。不确定这样转接后，是否能正常使用。但好处也很明显，一个500w电源供电绰绰有余，控制也方便了。\n外壳设计 先为主板画个简单cad图\n购买了一些基础工具，测量了主板的长、宽、以及螺丝孔位的位置。\n由于主板是异形，所以先找一张白纸，将主板的大小划在纸上，再测量划线之间的距离。同样标出螺丝空位的位置。\n将纸上的数据\n","date":"2025-03-17T14:34:29+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%94%B9nas/","title":"笔记本改nas"},{"content":"docker 基本概念 docker 文件 1 2 Dockerfile # docker编译文件 docker-compose.yml # compose文件 docker 概念 1 2 3 4 5 6 7 8 build Dockerfile -\u0026gt; docker-image pull internet -\u0026gt; docker-image run docker-image -\u0026gt; container start container -\u0026gt; running-container docker 命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 docker build \u0026lt;url\u0026gt; # 将指定路径的dockerfile编译为docker镜像 # -t 指定docker镜像名称 docker run \u0026lt;docker-image\u0026gt; # 启动docker镜像 # --name \u0026lt;container-name\u0026gt; # 指定容器名称，没有将自动命名 # -p \u0026lt;local-port\u0026gt;:\u0026lt;docker-port\u0026gt; # 指定监听端口 # -v \u0026lt;local-dir\u0026gt;:\u0026lt;docker-dir\u0026gt; # 挂载卷 # -idt \u0026lt;/bin/bash\u0026gt; # 指定后台运行终端，可以attach，或exec docker run --name \u0026lt;container-name\u0026gt; -p \u0026lt;local-port\u0026gt;:\u0026lt;docker-port\u0026gt; -v \u0026lt;local-dir\u0026gt;:\u0026lt;docker-dir\u0026gt; -idt \u0026lt;docker-image\u0026gt; /bin/bash # 运行一个docker的终端 docker start \u0026lt;container-name\u0026gt; # 启动一个容器 # -i 进入交互终端 docker stop \u0026lt;container-name\u0026gt; # 停止一个容器 docker rm \u0026lt;container-name\u0026gt; # 删除一个容器 docker exec \u0026lt;runing-container-name\u0026gt; \u0026lt;command\u0026gt; # 在一个已启动的容器内执行一条命令 docker exec -it \u0026lt;running-container-name\u0026gt; /bin/bash # 新开一个终端并进入 Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 FROM \u0026lt;name\u0026gt;:\u0026lt;version\u0026gt; # 选择一个基本镜像 WORKDIR \u0026lt;url\u0026gt; # 工作目录 COPY \u0026lt;local-dir\u0026gt; \u0026lt;docker-dir\u0026gt; # 从本地环境中复制文件 ADD \u0026lt;local-tar\u0026gt; \u0026lt;docker-dir\u0026gt; # 从本地环境中复制tar文件，并自动解压到指定目录 ENV key=value # 设定环境变量 ARG key=value # 设定仅Dockerfile中可用的环境变量 LABEL key=value # 设定元数据，如作者等 VOLUME \u0026lt;local-url\u0026gt; # 挂载匿名数据卷 VOLUME [\u0026#34;local-url-1\u0026#34;, \u0026#34;local-url-2\u0026#34;,...] EXPOSE \u0026lt;port\u0026gt; # 声明要用的端口 USER \u0026lt;user\u0026gt;[:\u0026lt;group\u0026gt;] # 后续命令的执行用户 RUN command arg1 arg2 ... # 创建docker容器时运行的命令 # 可以有多个RUN CMD [\u0026#34;command\u0026#34;, \u0026#34;arg1\u0026#34;, \u0026#34;arg2\u0026#34;, ...] # 运行docker容器后运行的命令 # 只有最后一个cmd起作用 # 会被docker命令行参数覆盖，如 docker -it \u0026lt;docker\u0026gt; /bin/bash docker-compose ","date":"2025-03-06T15:50:19+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/docker%E7%9A%84%E7%94%A8%E6%B3%95%E4%B8%8E%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","title":"Docker的用法，与创建一个开发环境"},{"content":"2024-06-04 目前的喜好如下\n喜好 颜色 淡粉色、白色\n黑色\n形象 17岁高中女生\n身高165~175之间\n偏小的脸\n皮肤偏白一些即可。\n白色（或者黄带金色）长发，及肩，微卷。\n脸不要太圆，偏学生相貌\n露出膝盖的百褶裙\n类似校服的衬衣、可以有轻薄的外套\n刚刚过膝盖的白丝袜\n可爱风格的小皮鞋（黑色、白色、粉色）、或者简单的有点亮晶晶的低跟（类似于礼服的那种鞋）\n手腕有可爱的亮闪闪的手饰。\n气质 喜欢笑、有活力。\n参考图 喜欢：脸4、头发除了刘海4、第三个衣领3、前两个衣领3\n不喜欢：裙子1、所有衣服1、鞋子2\n喜欢：发饰3、上衣3、外套3\n不喜欢：裙子2、鞋子2、衣领1\n喜欢：刘海3、发型3、第三个袖子作外套还行，\n不喜欢：表情1、脸1、鞋子1、衣领2、\n喜欢：发型4、前两个的外套4、第二个的上衣3、\n不喜欢：脸1、鞋子1\n喜欢：第二的外套3、第四的外套4（解开扣子应该会更好）、\n不喜欢：领口2、脸1、鞋1\n喜欢：外套4、鞋3、白丝（有点高了）3\n不喜欢：裙子1、领口1、外套的扣子1、头发1、脸1、\n喜欢：脸3、\n不喜欢：发型（过于卷了）1、\n喜欢：发型（看起来有点往两侧蓬了？）4、白丝4、第三个鞋子3\n不喜欢：领口1、表情1、发色1、\n喜欢：鞋4、袖子4、\n不喜欢：发量有点过多了1、表情2、领口2、\n背景设定 具体描述 ","date":"2024-06-04T03:00:30+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E8%87%AA%E8%AE%BE%E7%9A%84%E6%83%B3%E6%B3%95%E4%B8%8E%E5%96%9C%E5%A5%BD/","title":"自设的想法与喜好"},{"content":"安装配置 原始的终端并不算好看，所以打算进行一番配置，以符合我的审美\n安装 powershell 默认的powershell版本为5.1，将其升级为powershell 7。powershell 7默认就开启了很多功能，比如我最爱的↑↓→键快速匹配历史记录。\n当前使用的版本\n1 $psversiontable 我的版本7.4.2。\n没有7版本的进行安装\n1 winget install --id Microsoft.PowerShell 我的电脑默认两个版本都安装了，所以将终端的powershell 7启用即可。\n终端-设置-新配置文件-从powershell复制\n路径改为：C:\\Program Files\\PowerShell\\7\\pwsh.exe\n将默认值改为该配置文件。\noh-my-posh oh-my-posh是一个类似与oh-my-zsh的美化插件，先进行安装。这里的winget我能正常使用，否则请前往官网。\n1 winget install JanDeDobbeleer.OhMyPosh -s winget 配置 编辑powershell的用户配置\n1 2 3 4 notepad $PROFILE # 没有该文件，则创建一个新的 New-Item -Path $PROFILE -Type File -Force 添加以下内容保存\n1 oh-my-posh init pwsh | Invoke-Expression 重启终端。\n临时在当前环境中启用 1 $env:Path += \u0026#34;;C:\\Users\\user\\AppData\\Local\\Programs\\oh-my-posh\\bin\u0026#34; 配置主题 主题是一个json配置文件，默认自带就有很多。\n查看已安装主题\n1 Get-PoshThemes 要使用某个主题，编辑powershell配置\n1 notepad $PROFILE 将前面的语句修改为\n1 oh-my-posh init pwsh --config \u0026#34;$env:POSH_THEMES_PATH/\u0026lt;THEME_NAME\u0026gt;.omp.json\u0026#34; | Invoke-Expression 重启终端\n安装字体 omp的主题大多需要特殊符号，所以要安装一个nerf字体。\n官方推荐meslo字体，直接下载。\n1 Invoke-WebRequest -Uri \u0026#34;https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Meslo.zip\u0026#34; -OutFile Meslo.zip 解压后全选ttf文件，右键安装。\n在终端-powershell7的配置文件-外观-字体，选择MesloLGM Nerd Font Mono字体，保存。\n完成 到此，主题安装完成。\n我选择使用的是iterm2主题，\npowershell脚本 PowerShell的脚本后缀为ps1\n变量 定义变量\n1 2 $key = value # 中间可以有空格 使用变量\n1 2 Write-Output $key Write-Output ${key} 控制 判断 循环 ","date":"2024-05-30T10:50:23+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/powershell%E7%9A%84%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC%E7%94%A8%E6%B3%95/","title":"Powershell的配置、脚本用法"},{"content":"平砍流 打法 刷杂怪:影分身+静电之触+攻强化+冰霜\nBOSS:影分身+静电之触+攻强化+死亡之刃\n任何BOSS发疯时屏障回血+变鸡\n装备 主攻速、副暴击、爆伤、攻击\n头盔、面饰选暴击\n蟹钳:100ATK 蟹盾:425SHP+15DEF 战士斗篷:35ATK+10ASPD+5MaxEP 华丽头盔:25DEF+13Crit 红蝴蝶结x2:+25CritDMGx2 战术凉鞋:15ATK+5ASPD 眼罩:10Crit 主动技能 buff 攻强化 影分身（核心、金） 静电之触（核心、金） 伤害 冰霜（核心） 死亡之刃 位移 闪突 冲刺 保命 闪现 屏障 药水：回血+加攻+变鸡 被动技能 近战页 力量:10%ATK *剑术家:10ASPD 烈焰武器:15%普攻燃烧率 *复苏之风:回EP核心技 知识就是力量 反手一击:加攻 趁人之危:加攻 嗜血:加速 突然袭击:加攻,速 魔法页 神秘蓄力 一般页 耐久:+EP 外科医生:+15Crit 残暴:+30CritDMG 笔记 螃蟹，蘑菇，胡萝卜，鸡蛋和南瓜味的甜简\n","date":"2024-03-14T14:23:28+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E6%A0%BC%E5%85%B0%E8%92%82%E4%BA%9A%E7%A7%98%E9%97%BB-%E6%B8%B8%E6%88%8F%E7%AC%94%E8%AE%B0/","title":"格兰蒂亚秘闻 游戏笔记"},{"content":"网址链接 wiki\n每日副本 迷雾岛（图16） 随机三个金怪，凤纹刻印，右下角（54.46）\n单水法杖：祭司始终奶；法师50奶火球最低；圣枪射击最低；诡术手操诡雾弹；\n单光战斧：巫医35/75奶；法师50/50奶火球最低；圣枪射击最低；诡术手操诡雾弹；\n水光圣锤：祭司始终奶；法师50奶火球最低；圣枪射击最低；诡术手操诡雾弹；\n水光风胫甲：\n裁判所（图3） 裁判所徽记，右下（41,37）\n扫图配装\n转盘 → 左上角拿梯子 → 转盘 → 右上房间搭梯子 → 转盘 → 梯子进房间 → 打金头像兽人韦恩 → 点火 → 梯子出房间 → 打裁判者穆德拉\n龙虾护手蓝图、古代剑柄、银骑士之盾\n幽谷（图7） ，上方\n扫图配装\n5个怪：愁眉苦脸、垂头丧气、又矮又胖、浑身酒气、又高又瘦 → 中间红球 → 左上或右下 → 右上术士之影\n枯木之杖蓝图、幻视魔粉\n远山庄园（图8） 庄园钥匙，左上角（7,4）\n扫图配装\n10怪 → 左上角骑士图鲁士 → 左下角罗顿男爵\n燧火之衣蓝图、魔力之靴、神仆笔记\n墓葬（图11） 仿制龙纹硬币，正右方（45,22）\n扫图配装\n（可选）虎口阶梯 → 轻手轻脚 → 拆毁装置 → 四处观察 → 去往石台 → 打开宝箱 → 继续前进 → 通过吊桥 → 逃离，重进\n虎口阶梯 → 轻手轻脚 → 拆毁装置 → 四处观察 → 跃过裂隙 → 野狼之门 → 野猪之门 → 花豹之门 → 巨象之门 → 犀牛之门 → 查看机关 → 破解机关 → 黑石大门 → 无情的谢佛\n迅捷之靴、恶意原石\n元素塔（图11） （47，50）（30，7）（18，22）（35，13）（26，32）（23，16）\n扫图配装\n训练营（图14） 幽灵烈酒，右上角（51,7）\n祭司始终奶；龙猎猎龙弹；巫医50/75奶；火法50/50奶火球；\n寒霜秘术残页、寒冬鳞甲\n永恒迷宫（图15） 方石刻印，（9,50）\n五大宝箱路线图（宝箱一次性）\n顺时针-光线-转动石碑-左门-宝箱-地窖-魅灵法师（天然蓝宝石） 逆时针-光线-继续-右边-上游-扯动-水声-宝箱-精灵刺客（符文刻印） 逆时针-黄沙-荆棘-石板-漆黑-宝箱-邪灵暗使（魔化钢） 逆时针-匠人-擦拭-宝箱-风声-魅灵法师（天然蓝宝石）、水声-精灵刺客（符文刻印） 逆时针，进黄沙缺口，荆棘小径，踩上石板，微光洞口，取下帽子，戴上帽子，继续前进，荆棘小径，恢复石板，宝箱 天然蓝宝石、魔化钢，合成魔化蓝宝石\n","date":"2024-03-14T14:22:36+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E5%9C%B0%E4%B8%8B%E5%9F%8E%E5%A0%A12-%E7%AC%94%E8%AE%B0/","title":"地下城堡2 笔记"},{"content":"网页链接 wiki\n攻略\nNPC 重要npc npc 用处 商人 前期买猪猪、火把等，中后没用 护士 治疗，放复活点边上 爆破专家 炸弹，直通车 哥布林 重铸，火箭靴，饰品 树妖 种植、净化、植物、翅膀、南瓜子 巫妖 魔法球 机械师、朋克人、机械侠 电路相关 渔夫 钓鱼任务 酒馆老板 水晶，哨兵相关 城镇位置 每个地形最好间隔的均匀一些，方便赶路。\n丛林沙漠可以地表或者地下，最好在直通车边。\n地形 npc npc npc 备注 森林 商人 护士 军火商 出生点，家 地下 哥布林 机械师 染料商 微光 丛林 树妖 巫妖 油漆工 沙漠 朋克人 机器侠 雪原 服装商 税收官 海洋 渔夫 海盗 发型师 神圣 酒馆老板 爆破专家 蘑菇 松露人 需要的位置建人工环境 地狱 向导 方便肉山 要点 创造之手 合成需要游商买的4种物品，以及沙漠地下箱子（或者钓鱼）开出的凿子。\n建造必备物品。\n钓鱼 钓鱼任务肉前就开始做，有条件就钓熔岩池。\n微光 肉前就要找微光，帮助极大。\n刷怪场 肉前做场地，肉后使用较多。\n钱 前期无。\n有刷怪场后，刷松露虫。\n","date":"2023-12-20T10:05:33+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E6%B3%B0%E6%8B%89%E7%91%9E%E4%BA%9A-%E7%AC%94%E8%AE%B0/","title":"泰拉瑞亚 笔记"},{"content":"迁移系统到新硬盘 我买了一个新的迷你电脑，准备把老磁盘中的数据迁移到新的磁盘中，保留原来的系统和数据。\n新老硬件都是x86。\n硬盘克隆 将两个硬盘都连到同一个电脑中，我是新硬盘在新电脑上，将老ssd通过usb连上新电脑，通过U盘上的系统操作。\n推荐使用ventoy，随时切换系统很爽。\n我使用的是diskgenius软件（是在pe里，但实际上可以在任何系统上，win使用diskgenius，linux使用parted）。\n打开软件，点击工具-拷贝硬盘-选择源硬盘（是原来的有系统的硬盘，不要选错）-选择目标硬盘（通常来说是空的）-调整分区大小（可选）-开始。\n等待结束即可。\n之后的步骤老硬盘用不到了，全程用新的硬盘。\n修复系统 硬盘克隆后会有诸多问题，所以需要修复，主要是硬盘uuid和grub引导。\n修复grub 从livecd进入linux环境 bios里设置usb启动第一位，然后插上ventoy的U盘直接启动，选择自己喜欢的livecd，我使用的是manjaro。\nchroot到新硬盘的系统中 先查看硬盘中的分区\n1 2 3 4 5 6 7 8 sudo fdisk -l 设备 起点 末尾 扇区 大小 类型 /dev/nvme0n1p1 BIOS 启动 /dev/nvme0n1p2 EFI 系统 /dev/nvme0n1p3 Linux 文件系统 /dev/nvme0n1p4 Linux 文件系统 /dev/nvme0n1p5 Linux swap 可以看到，硬盘中有5个分区，我的第二个是efi分区，第三个是根目录，第四个是home\n挂载必要分区\n1 2 3 4 5 6 7 8 9 10 11 # 挂载根目录到 /mnt sudo mount /dev/nvme0n1p3 /mnt # 挂载home sudo mount /dev/nvme0n1p4 /mnt/home # 挂载proc，sys，run，dev sudo mount -t proc /proc /mnt/proc sudo mount --rbind /sys /mnt/sys sudo mount --rbind /run /mnt/run sudo mount --rbind /dev /mnt/dev # chroot chroot /mnt 重新写入grub 1 2 3 4 # 安装grub到efi分区 sudo grub-install /dev/nvme0n1p2 # 更新grub sudo update-grub 等待完成即可。\n修复磁盘自动挂载 获取分区的uuid。\n1 2 3 4 5 6 7 lsblk -o name,uuid /dev/nvme0n1p1 xxxxxx /dev/nvme0n1p2 xxxxxx /dev/nvme0n1p3 xxxxxx /dev/nvme0n1p4 xxxxxx /dev/nvme0n1p5 xxxxxx 如果最后一个swap分区没有uuid，就重新创建一个swap。\n1 mkswap /dev/nvme0n1p5 此时再输出一遍就有了。\n修改自动挂载文件\n1 nano /etc/fstab 其他不用改动，就把对应的uuid改为前面的新的即可。\n检查 正常重启，此时应当正常进入系统，不会出现卡grub等问题。\n","date":"2023-12-17T01:54:10+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E7%B3%BB%E7%BB%9F%E5%85%A8%E7%9B%98%E8%BF%81%E7%A7%BB/","title":"系统全盘迁移"},{"content":"前言 其实是打算卖了米9，所以把扩容的flyeme10刷回来miui12.5。\n但我这篇为扩容过程，刷回来自行反过来操作就行。\n主要内容来自于酷安-忆昔以西（虽然是csdn的链接，但是是原作者嘛）\n0 准备 软件 parted软件，我使用的是3.2版本，其他版本有可能出错，以下文件名parted，没有后缀名的。\nflyme10的卡刷包（我的来自酷安-wwrrj，请自行搜索），卡刷包与线刷包的区别在最后一步中\n不用解压 miui12.5官方线刷包\n请将压缩包解压 通常官方线刷包解压后会有很多bat与sh文件，还有一个image文件夹，里面是非常多文件 其他包大概率只有必要的几个包，如vendor.img，boot.img等 第三方rec，我是用的twrp和orangefox，两个都行反正\n文件名为recovery.img或者其他名字，请注意和线刷包里的rec文件区分，下面用twrp.img指代此文件。 adb工具\n硬件 能正常使用的数据线\n米9一部（注意需要解锁bl，不懂请百度）\n电脑（win系统，linux也可以，反正没有本质区别）\n命令格式说明 看得懂的可跳过该部分\n以下出现的命令，分为两种\nadb或者fastboot开头的，为电脑命令行中的命令 #开头的，为shell命令，在输入adb shell后输入该命令，退出该模式需要输入exit 0.5 开始usb调试（可跳过） 其实理论上，是不用这步的。\n手机连接电脑 打开手机设置-我的设备-全部参数 连点5下miui版本，直到跳出处于开发者模式的横条 进入设置-更多设置-开发者选项 打开usb调试和usb安全设置（实际上安全设置没啥用，应该） 输入命令adb devices，在List of devices attached下方出现一个设备，左边为设备id，右边的单词是unauthorized 此时手机上应该有个弹窗，点击、确定 此时输入命令adb devices，在List of devices attached下方出现一个设备，左边为设备id，右边的单词是device 此时完成usb调试的打开。\n1 刷rec 扩容操作主要在第三方rec的shell中进行，所以需要刷rec。\n从此步开始，你的原系统就没用了\n手机关机（或重启，请注意下一步） 同时按住音量减和电源键开机，此时屏幕出现安卓机器人为正确步骤。 手机连接电脑 电脑命令行输入（之后就直接写命令了）fastboot flash recovery ，从文件夹中拖入twrp.img，回车运行 等待Finished文字出现，出现其他文字请百度如何解决 刷入完成。\n2 扩容 由于flyme10的system分区大于米9原生的system分区，所以需要对system分区扩容\n请注意！！一定要注意拼写，我前面把vendor打成vender导致一连串的问题，所以一定要注意拼写。\n关机或重启 同时按住音量加贺电源键开机 刷入twrp的为蓝色屏幕，刷入orangefox为橙色屏幕 虽然rec不同，但功能是一样的 电脑上输入adb push 拖入parted文件，再输入/sbin/parted，回车 例如 adb push D:\\files\\parted /sbin/parted 此时应当出现xxxxx: 1 file pushed, 0 skipped.，此时为成功 输入adb shell回车，此时命令行为~ #开头 输入parted /dev/block/sda，回车，行首变为(parted) 注意，不同设备应该输入的不同，但同为小米9，输入的应当一致 有不懂请看最开始的链接 出现的字不对，行首仍为~ #，说明步骤3出错，请重试，或百度 输入p回车，出现一大串字，最后两行： 53 1007MB 2617MB 1611MB ext4 vendor 54 2617MB 6375MB 3758MB ext2 system 这是vendor和system分区，由于要扩容system分区，其后方没有空间可以给它了，所以要从前面vendor分区抢空间 接下来如果问你是或者否，或者其他选择，一律选第一项 rm 53，这里的53就是前面vendor这一行最前面的序号 rm 54，54为system分区的序号 mkpart system ext4 1007 6375 不用创建vendor分区，因为没空间了，所以在userdata分区中分出去一部分当作vendor分区 此时输入p，最后一行如下 53 1007MB 6375MB 5368MB ext4 system system分区为5368MB，一般的刷机包足够了，若需要更多，请将system分区创建在下面的部分（下面的剩余空间足够大） q退出parted，此时行首为~ # 完成一半了\n输入parted /dev/block/sde，回车，行首变为(parted) 输入p回车，出现一大串字，最后一行： 31 2080MB 121GB 119GB ext4 userdata 这是userdata分区 rm 31，这里的31是userdata分区的序号 mkpart vendor ext4 2080 4000，创建vendor分区 mkpart userdata ext4 4000 121GB，创建userdata分区 此时输入p，最后两行应当为 31 2080MB 4000MB 1920MB ext4 vendor 32 4000MB 121GB 119GB ext4 userdata 输入q退出parted，输入exit，退出adb shell 分区的事就到这里了，但扩容还未完成，接下来要格式化刚才新建的分区\n重启手机至fastboot模式（比如在电脑终端中输入adb reboot fastboot）\nfastboot erase vendor fastboot erase system fastboot erase userdata 此时手机已经扩容完毕，若是线刷包，可以直接在fastboot模式下线刷了。但我是卡刷包，所以重启至recovery\nfastboot reboot recovery\n3.1 刷入卡刷包 卡刷包为zip压缩包，里面有多个img文件，及META文件等\n在rec模式下，将zip压缩包复制到手机存储内 如果rec中文件显示为乱码，请百度如何解密，或者百度如何刷入防止自动解密补丁 在rec内，选择该zip文件，确认刷入，等待进度条结束即可。 3.2 刷入线刷包 将手机重启至fastboot模式。\n线刷包需要解压，文件夹内通常有多个img文件，也可能有bat后缀的文件\n如果有bat后缀的文件，直接将这个文件拖入命令行，等待即可。\n如果没有，或者bat运行失败，可以手动操作。\nfastboot flash boot ，拖入boot.img文件回车 fastboot flash system ，拖入system.img文件回车 fastboot flash vendor ，拖入vendor.img文件回车 。。。。。。 文件与分区名大多为相同的，少数为不同，可以下载一个官方线刷包，查看其bat文件的内容。\n4 结束 到这里，系统就刷好了，重启手机。\n卡住可以强制重启一次，一般来说，第二次就能正常开机了。\n如果前面步骤有任何报错，请百度，或者酷安。当然如果没有报错，那我也不知道了，也许是你的刷机包有问题，换一个吧。\n","date":"2023-10-10T22:25:15+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E5%B0%8F%E7%B1%B39%E6%89%A9%E5%AE%B9%E5%88%B7%E6%9C%BA/","title":"小米9扩容刷机"},{"content":"适用范围 适用于bash，zsh等shell的sh脚本文件\n基本 变量 普通变量 定义变量\n1 2 3 4 key=\u0026#34;str\u0026#34; # or key=str # 建议用第一种 使用变量\n1 2 3 $key # or ${key} 变量判断\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 若值未定义，则以default字符串或者变量${var}作为其值 ${key-default} # 若值未定义，或者为空，则以default字符串或者变量${var}作为其值 ${key:-default} # 若值已定义，则以default字符串或者变量${var}作为其值 ${key+default} # 若值已定义，并且不为空，则以default字符串或者变量${var}作为其值 ${key:+default} # 若值未定义，报错error_msg并退出 ${key?error_msg} # 若值未定义，或者为空，报错error_msg并退出 ${key:?error_msg} 字符串变量 字符串长度\n1 ${#str} 字符串截取\n1 2 3 4 5 6 7 8 9 10 11 # 按位数截取 ${str:5} # 从左侧第6个字符(0是第1个，1是第2个)开始，截取到末尾 ${str:0-7:3} # 从右侧第7个字符开始，截取3个字符 # 从右往左正则截取(配合通配符) ${str%regex} # 从右往左贪婪正则截取 ${str%%regex} # 从左往右正则截取 ${str#regex} # 从左往右贪婪正则截取 ${str##regex} 字符串替换\n1 2 3 str=\u0026#34;old_string\u0026#34; ${str/#old/new} # new_string 字符串大小写\n1 2 3 4 # 大写 ${str^^} # 小写 ${str,,} 变量匹配 1 2 3 4 # 匹配所有以char开头的变量名 # 得到的是变量名，不是变量值 ${!char*} ${!char@} 变量的变量 1 2 3 var_name=\u0026#34;name\u0026#34; name=\u0026#34;var_value\u0026#34; ${!ver_name} # 得到 \u0026#34;var_value\u0026#34; 数组 普通数组 定义数组\n1 2 3 4 key=(\u0026#34;value1\u0026#34; \u0026#34;value2\u0026#34; \u0026#34;value3\u0026#34;) # or key=\u0026#34;value1 value2 value3\u0026#34; # 建议用第一种 使用数组\n1 2 ${key[index]} # 从0开始 关联数组 定义关联数组\n1 2 3 4 5 declare -A dic=([\u0026#34;key1\u0026#34;]=\u0026#34;value1\u0026#34; [\u0026#34;key2\u0026#34;]=\u0026#34;value2\u0026#34;) # or declare -A dic dic[\u0026#34;key1\u0026#34;]=\u0026#34;value1\u0026#34; dic[\u0026#34;key2\u0026#34;]=\u0026#34;value2\u0026#34; 使用关联数组\n1 2 3 4 5 6 # 获取key对应的value ${dic[key]} # 获取所有的key（倒序） ${!dic[*]} # 获取所有的value（倒序） ${dic[*]} 字符串值 1 2 3 4 5 \u0026#34;str\u0026#34; # ${value} 变量 $(command) 函数 等 # \\n 换行 \\r 回到行首 \u0026#39;str\u0026#39; # 字面值 打印字符串 echo\n1 2 3 4 5 6 echo \u0026#34;str1\u0026#34; \u0026#34;str2\u0026#34; # str1 str2 echo -ne \u0026#34;12345\\r67\\n\u0026#34; # 67345 # -n 结尾不换行 # -e 允许\\r操作符回到行首 # 与printf默认行为一致 printf\n1 2 3 4 5 6 7 8 printf \u0026#34;string\\n\u0026#34; printf \u0026#34;num:%d float:%f char:%c str:%s\\n\u0026#34; $num $float $char $str # % 转义符 # %2d 2宽 %.2d 2宽，用0补充 # %.2f 小数点后两位，四舍五入 # %2c 2宽 # %x 十六进制数 %o 八进制数 %e 二进制数 函数 定义函数\n1 2 3 4 5 6 7 func_name() { commands } # or function func_name() { commands } 使用函数\n1 2 func_name args # 多个参数 空格分隔 函数返回值\n1 2 3 return 0 # 0-255 # 0为正常运行 1-255为报错 控制 判断 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if [[ condition ]]; then #statements elif [[ condition ]]; then #statements else #statements fi # 简易写法 # 与 command1 \u0026amp;\u0026amp; command2 # 左边返回真（$?==0），右边才执行 # 或 command1 || command2 # 左边返回假（$?==1），右边才执行 循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 条件循环 while [[ -z $key ]] ; do #statements done for (( i = 0; i \u0026lt; 10; i++ )); do #statements done # 等价于 for i in `seq 0 9`; do #statements done # 等价于 for i in {0..9}; do #statements done # 枚举循环 for i in word1 word2 word3; do #statements done # 等价于 words=(word1 word2 word3) for i in ${words[@]}; do #statements done 参数 获取参数\n1 2 $1 $2 #...... # 最多9个 特殊参数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 文件名(相对路径) $0 # 所有参数(单字符串) $* # \u0026#34;$1 $2 $3...\u0026#34; # 所有参数(多字符串) $@ # \u0026#34;$1\u0026#34; \u0026#34;$2\u0026#34; \u0026#34;$3\u0026#34; ... # 参数个数 $# # 脚本的进程ID $$ # 后台运行的最后一个进程ID $! # shell使用的当前选项 $- # 最后一个命令的退出值，一般0为正常运行无错误，范围是0~255(-1) $? 获取命令输出 1 2 3 $(command) # 支持嵌套，推荐 # 或者 `command` 管道 1 command1 | command2 合并执行 1 2 3 4 5 6 # 在当前shell中执行 (command1; command2; command3) # 在子shell中执行 { command1; command2; command3 } # {}与命令间有空格 判断条件 双中括号（字符串比较）(推荐)\n1 2 3 4 5 6 7 8 9 # 字符串匹配 [[ string == str* ]] # 右侧可以为模式，*等通配符无需引号 # *任意字符 # 相等 == # 不等于 != # 正则匹配 =~ 左侧为被搜索内容，右侧为正则内容 # ascii码比较 \u0026lt; \u0026gt; 单中括号\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 字符串比较 [ a != b ] # 支持 ==相等, !=不等 # 整数比较 [ 1 -eq 2 ] # 支持 -eq等于 -ne不等于 -lt小于 -le小于等于 -gt大于 -ge大于等于 # 逻辑计算 [ true -a true ] # 支持 -a逻辑与 -o逻辑或 # 文件判断 [ -d file ] # 支持 -d为目录 -e存在 -f文件 -r可读 -w可写 -x可执行 -O拥有 -G同组 [ file1 -nt file2 ] # 支持 -nt新于 -ot旧于 双小括号（数学比较）\n1 2 3 4 5 6 7 8 9 # 计算数学表达式 (( 2 + 2 \u0026gt; 3 )) # 支持 + - * / % ** ++ -- (整数运算) # 支持 \u0026amp;\u0026amp; || ! ~ \u0026gt;\u0026gt; \u0026lt;\u0026lt; \u0026amp; | # 结果非0或为真，返回真（1） # 结果为0或为假，返回假（0） # 优先级同C语言 数值计算 1 2 3 4 5 6 7 8 9 10 11 12 13 # 使用bash内置计算方式 res=$[$num1 + $num2] # 支持 + - * / # 只能整数计算，除法向下取整 # 使用expr计算 res=$(expr $num1 \\* $num2) # 支持 + - \\* / % （请注意乘法需要加转义符\\） # 只能整数计算，除法向下取整 # 使用 bc 命令行工具计算 res=$(echo \u0026#34;scale=3;($num1 + $num2) * $num3 / $num4\u0026#34; | bc) # scale=3 精度为小数点3位 重定向 输入\n1 2 3 4 5 6 7 8 # 将输入重定向到 file。 command \u0026lt; file # 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 command \u0026lt;\u0026lt; tag CONTENT tag # 结束tag顶格且后面不能有空格 输出\n1 2 3 4 5 # 将输出重定向到 file。 command \u0026gt; file # 将输出以追加的方式重定向到 file。 command \u0026gt;\u0026gt; file 标准流\n1 2 3 4 5 6 7 8 9 10 11 12 # 将描述符为 n 的流重定向到 file。 n \u0026gt; file # 将描述符为 n 的流以追加的方式重定向到 file。 n \u0026gt;\u0026gt; file # 将输出流 m 和 n 合并。 n \u0026gt;\u0026amp; m # 将输入流 m 和 n 合并。 n \u0026lt;\u0026amp; m # 0: stdin # 1: stdout # 2: stderr 常用 1 2 3 4 5 6 7 8 # 从文件中输入 command \u0026lt; file # 合并std到标准输出 command 2\u0026gt;\u0026amp;1 # 合并输出并写入文件 command \u0026gt; file 2\u0026gt;\u0026amp;1 C语言规则 1 2 3 4 5 6 7 8 9 10 11 12 13 $((exp)) # 只要符合C语言运算规则 # 正常的计算 $(( (1*(1+1)-1)/1%1 )) # 只支持整数计算 # 三目运算符 $(( 1 != 2 ? 1 : 2 )) # 不同进制 $(( 16#2a )) # 结果为 42（转成十进制） 其他 1 2 3 4 5 6 7 8 9 10 11 # 命令替换 (cmd) # 等同 `cmd` # 重定义变量 (( a++ )) # 文件名扩展 ls {file1,file{2..3},file[4-5]}.sh # 等同于 ls file1.sh file2.sh file3.sh file4.sh file5.sh 常用方法 获取后缀名 1 2 3 4 5 6 # 截取文件后缀名 ${url##*.} # 截取文件名 ${url##*/} # 截取文件夹路径 ${url%/*}/ 判断变量是否存在 1 2 3 4 5 6 7 if [[ -z \u0026#34;${key=}\u0026#34; ]] ; then # 未定义 elif [[ -z \u0026#34;${key:=}\u0026#34; ]] ; then # 定义但为空 else # 存在 fi 去除字符串后n位 1 2 string=\u0026#34;012345\u0026#34; ${string:0:$[${#string}-n]} 工作路径切换 1 2 3 4 work_url=$(cd $(dirname $0);pwd) cd \u0026#34;${work_url}\u0026#34; # 切换到父文件夹 cd \u0026#34;${work_url%/*}\u0026#34; 获取带空格的文件名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 方法一(推荐) readarray -t files \u0026lt;\u0026lt;\u0026lt; \u0026#34;$(ls)\u0026#34; for file in \u0026#34;${files[@]}\u0026#34;; do echo \u0026#34;$file\u0026#34; done # 方法二 SAVEIFS=$IFS IFS=$\u0026#39;\\n\u0026#39; for file in ./* ; do echo $file done IFS=$SAVEIFS # 方法三 SAVEIFS=$IFS IFS=$\u0026#39;\\n\u0026#39; fileArray=($(find . -type f)) IFS=$SAVEIFS tLen=${#fileArray[@]} for (( i=0; i\u0026lt;${tLen}; i++ )) ; do echo \u0026#34;${fileArray[$i]}\u0026#34; done 判断语句的简单写法 1 [[ -z $1 ]] \u0026amp;\u0026amp; echo true || echo false 判断字符串是否在数组中 简单判断(可能部分匹配)\n1 [[ \u0026#34;${array[@]}\u0026#34; =~ \u0026#34;$1\u0026#34; ]] \u0026amp;\u0026amp; echo true || echo false 完整判断\n1 2 3 4 5 6 for str in \u0026#34;${array[@]}\u0026#34;; then if [[ \u0026#34;$str\u0026#34; == \u0026#34;$1\u0026#34; ]]; then echo True break fi done ","date":"2023-08-11T14:00:49+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/shell-%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/","title":"Shell 脚本基本规则及常见用法"},{"content":"前言 本文内容基本来自于书伴\n越狱插件内容基本来自于书伴\n如有疑问, 请前往源网站查看。\n准备 设备 设备型号：Kindle Voyage 系统版本：5.13.6（其他版本请查阅原网站 任意电脑（请熟悉电脑操作） 一根可以传输数据的micro-usb数据线(有些商家可能会卖只能充电不能传输数据的线, 请注意甄别) 文件 watchthis-jailbreak-r03.zip越狱包 JailBreak-x.xx.N-FW-5.x-hotfix.zip越狱环境固化包 *kual-mrinstaller-1.7.N-r18896.tar.xz插件管理器（可选） 所有文件来自于原链接。\n越狱 进入演示模式 重置Kindle(注意是重置) 等待重置后, 在语言选择界面选择English(United Kingdom) 选择WIFI界面,点击set up, 然后点X关闭选择WIFI页面, 点击新出现的set up later 搜索栏输入;enter_demo, 回车 重启设备(注意是重启, 与前面不同) *秘密手势 此步骤只有在版本号小于等于 5.14.1 时需要, 5.14.2 版本并且重启后没有出现Register This Demo界面可直接跳过。\n进入Register This Demo界面后跳出WIFI设置, 点X跳过 三项信息的表单中输入任意字符, 然后点CONTINUE继续 点击Skip 点击standard 点击Done 点一下屏幕激活 使用秘密手势进入系统 双指点击右下角 单指从右下角向左划（大概到中间偏左即可） 有可能要多次尝试\n侧载越狱文件 搜索栏输入;demo进入演示菜单 点击Sideload Content进入Demo Mode: Add Content菜单 用USB线连接电脑 将watchthis-jailbreak-r03.zip文件解压, 其目录内有Update_hotfix_watchthis_custom.bin文件与一堆文件夹。\n我的设备是Kindle Voyage, 进入KV文件夹。\n我的版本号是5.13.6, 进入5.13.6文件夹, 其中有一个zip压缩包与一个demo.json文件。\n在Kindle根目录下, 创建一个名为.demo的文件夹（注意有个点） 在.demo文件夹中, 放入zip与demo.json两个文件 在.demo文件夹中, 创建一个名为goodreads的空文件夹 此时文件树为：\n1 2 3 4 5 6 Kindle磁盘 └── .demo ├── [Kindle设备型号简称]-[固件版本号].zip ├── demo.json └── goodreads └── 点击Done 点击Exit(如果在点击Exit按钮后，出现Application Error提示，请按住电源按钮 40 秒硬重启设备，重启后会再次进入演示模式，在搜索框中输入命令 ;demo 重新进入演示菜单Demo Menu，然后断开 Kindle 与电脑的 USB 数据线连接，再一次点击Sideload Content -\u0026gt; Done，最后点击Exit退出演示菜单) 在搜索栏中输入;dsts进入设置，并依次点击Help \u0026amp; User Guides -\u0026gt; Get Started 此时设备会自动重启，重启过程中会看到启动界面上有文本提示越狱安装过程。\n退出演示模式 重启完成后会进入演示模式（如果之前没有使用“秘密手势”进入演示模式，这一步也不需要，否则需要再次操作秘密手势进入演示模式）\n搜索栏输入;demo进入演示菜单 点击Sideload Content进入Demo Mode: Add Content菜单 用USB线连接电脑 将Update_hotfix_watchthis_custom.bin文件直接放入根目录中 点击Done 电脑上弹出磁盘 搜索栏输入;dsts进入设置, 点击Device Options -\u0026gt; Update Your Kindle，点OK Kindle会自动重启，重启完成后会在正常模式。\n安装越狱环境固化更新 用USB线连接电脑 将Update_jailbreak_hotfix_x.xx.N_install.bin文件放入根目录 电脑上弹出磁盘 进入设置, 点击Device Options -\u0026gt; Update Your Kindle，点OK 等待重启 *更新固件 越狱环境固化完成后，即可放心更新固件，越狱环境不会消失。\n*越狱插件 下载文件kual-mrinstaller-1.7.N-r18896.zip并解压。\n把文件夹内的 extensions 和 mrpackages 拷贝到 Kindle 的根目录。\n其他插件请去原网站下载安装\n","date":"2023-07-05T01:09:41+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/kindle%E8%B6%8A%E7%8B%B1/","title":"Kindle越狱"},{"content":"常用git命令 设置 1 2 3 4 5 6 7 git config --global user.name \u0026#34;\u0026lt;USERNAME\u0026gt;\u0026#34; # 设置用户名 git config --global user.email \u0026#34;\u0026lt;EMAIL\u0026gt;\u0026#34; # 设置邮箱 git config --global http.proxy \u0026#34;\u0026lt;PROXY\u0026gt;\u0026#34; # 设置代理 git config --global https.proxy \u0026#34;\u0026lt;PROXY\u0026gt;\u0026#34; # 设置代理 git config --global init.defaultBranch \u0026lt;default-branch\u0026gt; # 设置默认分支名，建议为 master 基本流程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # 克隆远程仓库到本地 git clone \u0026lt;URL\u0026gt; # 克隆远程仓库 # 创建本地仓库 git init # 初始化仓库 git remote add \u0026lt;remote-name\u0026gt; \u0026lt;remote-url\u0026gt; # 添加远程仓库 # 通常远程仓库名称可以叫 origin git status # 仓库状态 # 修改仓库 git add \u0026lt;FILE\u0026gt; # 将文件的改动添加到暂存区 git commit -m \u0026#34;TYPE: CONTENT\u0026#34; # 提交暂存区的所有改动 # feat: 新功能 # fix: 修复问题 # docs: 文档更改 # update: 更新文件 # test: 测试修改 # 重新获取远程仓库 git fetch \u0026lt;remote-name\u0026gt; # 获取远程仓库的更新 git fetch \u0026lt;remote-name\u0026gt; \u0026lt;remote-branch\u0026gt; # 获取远程仓库的某一个分支更新 # 此时获取到的分支为 \u0026lt;remote-name\u0026gt;/\u0026lt;remote-branch\u0026gt; git merge \u0026lt;remote-name\u0026gt;/\u0026lt;remote-branch\u0026gt; # 将该分支合并到主分支中 git rebase \u0026lt;remote-name\u0026gt;/\u0026lt;remote-branch\u0026gt; # 将该分支合并到主分支中 # 获取、推送 git pull \u0026lt;remote-name\u0026gt; \u0026lt;remote-branch\u0026gt;:\u0026lt;local-branch\u0026gt; # 将远程仓库的某个分支合并到本地分支中 git push \u0026lt;remote-name\u0026gt; \u0026lt;local-branch\u0026gt;:\u0026lt;remote-branch\u0026gt; # 将本地分支推送到远程仓库的某个分支中 常用命令 仓库 1 2 3 4 5 6 7 8 9 10 11 12 git init # 初始化仓库 git init -b \u0026lt;branch-name\u0026gt; # 初始化仓库，并设置默认分支名 git status # 仓库状态 git reset --soft \u0026lt;COMMIT_ID\u0026gt; # 回退到指定提交 # HEAD 当前提交；HEAD^ 上一个提交； HEAD^^ 上上个提交 # HEAD~100 上100个提交 # --soft 保留后续的提交 # --hard 删除后续的提交 git log # 仓库记录 git reflog # git操作记录 远程 1 2 3 4 5 6 7 git remote add \u0026lt;remote-name\u0026gt; \u0026lt;remote-url\u0026gt; # 添加远程仓库 git remote -v # 列出远程仓库 git remote show \u0026lt;remote-name\u0026gt; # 查看远程仓库信息 git remote rm \u0026lt;remote-name\u0026gt; # 删除远程库 git push \u0026lt;remote-name\u0026gt; \u0026lt;local-name\u0026gt; # 将本地推送到远程 git push -u \u0026lt;remote-name\u0026gt; \u0026lt;local-name\u0026gt; # 将本地推送到远程，并绑定本地 文件 1 2 3 4 5 6 git diff \u0026lt;FILE\u0026gt; # 比对文件与已提交的区别 git checkout -- \u0026lt;FILE\u0026gt; # 将文件的改动从暂存区撤回 git reset \u0026lt;COMMIT_ID\u0026gt; \u0026lt;FILE\u0026gt; # 将文件恢复至某次提交 git rm \u0026lt;FILE\u0026gt; # 删除文件 分支 1 2 3 4 5 6 7 8 9 10 11 12 13 git branch \u0026lt;branch\u0026gt; # 创建分支 git switch \u0026lt;branch\u0026gt; # 切换分支 git switch -c \u0026lt;branch\u0026gt; # 创建并切换分支 git checkout -b \u0026lt;branch\u0026gt; # 创建并切换分支，老方法 git merge \u0026lt;other_branch\u0026gt; # 合并分支 git cherry-pick \u0026lt;COMMIT_ID\u0026gt; # 将某次提交重复提交到当前分支 git branch -d \u0026lt;branch\u0026gt; # 删除分支 git branch -D \u0026lt;branch\u0026gt; # 强制删除分支 git log --graph # 查看分支合并图 暂存 1 2 3 4 5 6 7 git stash # 将当前改动存到临时区 git stash list # 列出当前临时区内的列表 git stash apply stash@{x} # 恢复某个临时区内容 git stash drop # 删除某个临时区 git stash pop # 恢复并删除某个临时区 标签 1 2 3 4 5 6 7 8 9 10 11 12 git tag \u0026lt;tag_name\u0026gt; \u0026lt;COMMIT_ID\u0026gt; # 为某次提交添加标签 git tag -a \u0026lt;tag_name\u0026gt; -m \u0026#34;tag info\u0026#34; \u0026lt;COMMIT_ID\u0026gt; # 为某次提交添加带说明的标签 git tag # 列出所有标签 git show \u0026lt;tag_name\u0026gt; # 显示标签信息 git push origin \u0026lt;tag_name\u0026gt; # 将某个标签推送到远程库 git push origin --tags # 将所有没被推送的标签推送到远程库 git tag -d \u0026lt;tag_name\u0026gt; # 删除本地标签 git push origin :refs/tags/\u0026lt;tag_name\u0026gt; # 删除远程库标签 整理提交 1 2 3 4 5 6 7 8 9 10 11 git rebase -i HEAD~n # 交互式修改前n个提交 # 将其中的pick改为fixup可合并commit # fixup会将该行提交合并到上一行 # 其他可看提示信息 git rebase --edit-todo # 编辑rebase git rebase --continue # 继续rebase git rebase --skip # 跳过rebase的错误 git rebase --abort # 取消rebase，回退到之前的状态 git push -f ... # 强制推送更新 零散指令 1 2 git shortlog -sn # 查看各个作者的提交数量 git rev-list --count HEAD # 获取所有提交数量 ","date":"2023-05-06T16:25:48+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/","title":"git常用命令笔记"},{"content":"安装 pacman直接安装即可\n配置 运行命令将全局配置复制到 ~/.config/ranger/\n1 ranger --copy-config=all 编辑~/.config/ranger/rc.conf。\n文件预览 默认打开的。\n1 set preview_files true 图像预览 注：我按照网上说的没成功。有说需要xterm字符界面，不能是terminal虚拟终端。\n1 2 set preview_images false # 改成 true set preview_images_method w3m # 改成自己用的就行 w3m/kitty/等，需要自己安装 代码高亮 安装highlight即可。\n1 pacman -S highlight 压缩包预览 安装atool即可。\n1 pacman -S atool 编辑器选择 第一次用ranger打开文件会让选择编辑器\n外观 1 2 3 set draw_borders true # 绘制边框 set line_numbers true # 显示序号 set column_ratios 2,3,5 # 设置宽度，比例 使用 基本操作 按键1 按键2 作用 h ← 返回上一层 l → 进入文件/文件夹 j ↓ 向下 k ↑ 向上 Enter 打开文件 q 退出 新建/删除 按键1 按键2 作用 F7 :mkdir 新建文件夹 INSERT :touch 新建文件 dD F8 删除文件/文件夹，等同:delete DD 移至回收站 重命名 按键 作用 cw 重命名，包括后缀 I 重命名，光标在最前 A 重命名，光标在最后 a 重命名，光标在最后，不包括后缀 粘贴 按键 作用 pp 粘贴，默认 append 模式 pP append 模式，如果该目录中有同名条目，则在条目后面加上 _、_0、_1……。如果条目是文件，则在文件后缀名后加入。 po overwrite 模式，如果该目录中有同名条目，则覆盖原来的条目。 pO append 模式 + overwrite 模式。 pl 粘贴为符号链接，不在状态栏显示目标条目的相对路径。 pL 粘贴为符号链接（相对路径），在状态栏显示目标条目的相对路径。 phl 粘贴为硬链接 pht 粘贴为硬链接的子目录（hardlinked subtree） 搜索 按键 作用 / 打开搜索框，输入要搜索的字符串，回车后开始搜索。 f 查找，等同于运行满足条件的文件或者打开满足条件的文件夹。 zf 与命令行 filter 作用一样，只显示符合条件的条目，区分大小写。 n N 查找下一个搜索结果 查找上一个搜索结果 c + 对应字母 通过对应属性依次遍历，如：ca：通过 atime属性依次遍历cc：通过 ctime 属性依次遍历ci：通过 mimetype 属性依次遍历cm：通过 mtime 属性依次遍历cs：通过 size 属性依次遍历ct：通过 tag 属性依次遍历 帮助页面 按键 作用 m 打开手册页 k 打开按键绑定 c 打开可用命令和描述的列表 s 打开设置及其当前值的列表 ","date":"2023-05-06T01:35:00+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/ranger%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/","title":"Ranger配置及使用"},{"content":"常见自带软件/命令使用 pacman/yay 搜索/安装 1 2 3 4 5 yay -Ss PKG_NAME yay -S PKG_NAME # 或 yay -Sy PKG_NAME 卸载 卸载包及它依赖的包（往下递归）(常用)\n1 yay -Rns PKG_NAME 卸载包及依赖它的包（往上递归）\n1 yay -Rnc PKG_NAME -n 不保留配置文件\n清理 1 2 yay -Sc # 清理未安装的包缓存 yay -Scc # 清理所有包缓存 获取包信息 1 2 3 4 5 6 7 8 yay -Qq # 列出所有本地安装的包 # -Q 查询本地 # -q 省略版本号 yay -Qqe # 列出所有显式安装的包 yay -Qqen # -n 忽略外部AUR包 yay -Qqd # 列出所有依赖安装的包 yay -Qqdt # 列出所有孤立的包 清除查看占用文件的进程 查看文件被哪些进程占用\n1 lsof \u0026lt;URL\u0026gt; 结束进程\n1 kill \u0026lt;PID\u0026gt; lsof报错lsof: WARNING: can't stat()，添加参数-e \u0026lt;ERROR_URL\u0026gt;。\nlinux同步时间 系统时间信息\n1 timedatectl status 同步ntp时间\n1 timedatectl set-ntp true 设置时区\n1 timedatectl set-timezone Asia/Shanghai 修改ntp服务器：/etc/systemd/timesyncd.conf\n1 FallbackNTP=ntp.ntsc.ac.cn ntp.aliyun.com ntp.tencent.com 重启服务\n1 systemctl restart systemd-timesyncd 文件格式化处理 使用awk\n1 awk \u0026#39;BEGIN{commands} pattern {commands} END{commands}\u0026#39; file BEGIN{} 开始前运行的命令 pattern 匹配模式 {} 处理命令 END{} 结束后运行的命令 命令间用 ; 分隔\n-v 引入外部变量\n1 awk -v var1=\u0026#34;$num1\u0026#34; -v var2=\u0026#34;$num2\u0026#34; \u0026#39;\u0026#39; file -f 指定脚本\n1 awk -f file.awk \u0026#39;\u0026#39; file -F 指定分隔符\n1 awk -F, \u0026#39;\u0026#39; file 匹配模式 正则匹配\n1 awk \u0026#39;/pattern/ {commands}\u0026#39; 关系匹配\n1 awk \u0026#39;$1\u0026gt;10 {commandss}\u0026#39; 关系运算符\n1 2 3 4 5 6 7 8 \u0026lt; 小于 \u0026gt; 大于 \u0026lt;= 小于等于 \u0026gt;= 大于等于 == 等于 != 不等于 ~ 匹配正则表达式 !~ 不匹配正则表达式 布尔运算符\n1 2 3 || 或 \u0026amp;\u0026amp; 与 ! 非 内置变量 1 2 3 4 5 6 7 8 9 10 11 12 $0 整行内容 $n 第n个内容 NF 当前行总列数 NR 当前行行数，从1开始 FNR 当前行在当前文件的行数，从0开始 FS 字段分隔符，默认空格及tab RS 行分隔符，默认回车 OFS 输出字段分隔符 ORS 输出行分隔符 FILENAME 当前输入文件名字 ARGC 命令行参数个数 ARGV 命令行参数数组 内置命令 表达式\n1 2 + - * / % ^ ** ++x x++ --x x-- 输出\n1 2 print $1 $2 printf \u0026#34;%4s %-4s\u0026#34;,\u0026#34;string\u0026#34;,\u0026#34;string\u0026#34; %s字符串 %c字符的ascll码 %d整数 %f浮点数 %x十六进制 %o八进制 %e科学计数法 %-N 左对齐 %+N 右对齐 %# 8进制前加0，16进制前加0x %.2f 小数点后两位\n1 2 3 4 5 6 7 length(str) # 字符串长度 index(str1,str2) # 在str1中找str2的位置 substr(str,m,n) # 从str的m个字符开始，截取n位 split(str,arr,fs) # 按fs切割字符串并保存在arr中，返回切割后的子串个数 match(str,RE) # 在str中按照RE查找，返回索引位置 sub(RE,RepStr,str) # 在str中替换第一个符合RE的子串为RepStr，返回替换的个数 gsub(RE,RepStr,str) # 在str中替换所有符合RE的子串为RepStr，返回替换的个数 条件语句\n1 if(){}else if(){}else{} 循环语句\n1 2 3 while(){} do{}while() for(;;){} 常用例子 打印每行第一项和第五项\n1 cat file | awk \u0026#39;{print $1 $5}\u0026#39; 正则匹配行并打印第一项\n1 cat file | awk \u0026#39;/pattern/ {print $1}\u0026#39; 以“,”为分隔，打印行号和文字\n1 cat file | awk \u0026#39;BEGIN{FS=\u0026#34;,\u0026#34;} {print NR \u0026#34;TEXT\u0026#34;}\u0026#39; 匹配文件中第3个字段小于50并且第7个字段匹配pattern的所有行信息\n1 cat file | awk \u0026#39;$3\u0026lt;50 \u0026amp;\u0026amp; $7~/pattern/ {print $0}\u0026#39; 统计空白行\n1 cat file | awk \u0026#39;/^$/ {sum++} END{print sum}\u0026#39; 报表形式统计文件\n1 cat stu.txt |awk \u0026#39;BEGIN{printf \u0026#34;%-8s%-5s%-5s%-5s%-5s%-5s%-8s\\n\u0026#34;,\u0026#34;姓名\u0026#34;,\u0026#34;语文\u0026#34;,\u0026#34;数学\u0026#34;,\u0026#34;英语\u0026#34;,\u0026#34;物理\u0026#34;,\u0026#34;总分\u0026#34;,\u0026#34;平均分\u0026#34;} {total=$2+$3+$4+$5;avg=total/4;printf \u0026#34;%-8s%-8d%-6d%-8d%-7d%-5d%0.2f\\n\u0026#34;,$1,$2,$3,$4,$5,total,avg}\u0026#39; 输出：\n1 2 3 姓名 语文 数学 英语 物理 总分 平均分 张三 80 60 85 90 315 78.75 李四 85 65 80 75 305 76.25 计算1+2+3+\u0026hellip;+100的和。\n1 2 awk \u0026#39;BEGIN{while(i\u0026lt;100){i++;sum+=i;}} {print sum}\u0026#39; awk \u0026#39;BEGIN{for(i=0;i\u0026lt;=100;i++){sum+=i;}} {print sum}\u0026#39; 判断linux桌面环境是xorg还是wayland 1 echo $XDG_SESSION_TYPE 检查远程端口 1 nc -vz [ip/host] port 端口无法连到会超时，被拒绝会显示refused\nshell原生前后台运行 暂停当前任务并放到后台\n1 ctrl-z 将暂停的任务在后台运行，1是作业号\n1 bg 1 将暂停的任务回到前台运行，1是作业号\n1 fg 1 fg 不带作业号，默认是最后一个任务\n查看正在运行的任务\n1 jobs 获取文件夹大小 1 2 du -h --max-depth=1 ./ # 获取当前文件夹下的各文件的大小 du -h --max-depth=1 ./ | sort -rh | head # 从大到小排序，并获取前10项 磁盘管理 磁盘分区 gpt分区表用parted，mbr用parted或fdisk都行。\n1 sudo parted /dev/sda # 分区不用加后面的数字，对整个磁盘操作 1 2 3 4 5 6 7 print # 查看下当前的分区表，可以用 rm NUMBER 命令删除不要的分区 mkpart NAME TYPE START END # 可以只输入mkpart，它问你一个，回答一个 # NAME，一般为空 # TYPE，可以是ext4,exfat,ntfs.... # START，从头开始为0，其他的根据上面print的结果填写 # END，结束的位置，不要大于整个磁盘的大小 quit # 退出保存 1 2 sudo fdisk /dev/sda -l # 查看当前分区表 sudo fdisk /dev/sda # 分区不用加后面的数字，对整个磁盘操作 1 2 3 4 5 6 d NUMBER # 删除不要的分区 n # 新建 Partition number (1-128, default 1): # 直接回车默认就行 First sector (2048-XXX, default 2048): # 直接回车默认就行 Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-XXX, default XXX): # 输入磁盘大小 +10G # +表示在开始位置上加，10G表示10G大小，其他大小可以看提示里的符号 磁盘格式化 格式化用mkfs即可，根据不同文件系统，选择不同参数\n1 sudo mkfs /dev/sdaX -t TYPE 磁盘填自己的位置，TYPE有ext2,ext4,exfat,ntfs,xfs等等文件系统，可以tab查看\n磁盘重命名 不同文件系统用不同的指令\n1 2 3 4 5 sudo mlabel -i /dev/sdaX ::NEWNAME # fat32 sudo ntfslabel /dev/sdaX NEWNAME # ntfs sudo e2label /dev/sdaX NEWNAME # ext2,ext3,ext4 sudo exfatlabel /dev/sdaX NEWNAME # exfat sudo xfs_admin -L \u0026#34;NEWNAME\u0026#34; /dev/sdaX # xfs 手动更改aur包 下载的包通常位于$HOME/.cache/yay/$PKGNAME 修改PKGBUILD 执行makepkg -si(-s 自动下载makedepend -i 自动安装) 比对两个文件 1 2 3 4 diff file_old.txt file_new.txt -y -W 100 # 左右显示比对 -u # git形式显示比对 自定义dns地址 修改NetworkManager配置\n1 2 3 4 nano /etc/NetworkManager/conf.d/20-rc-manager.conf # 添加 [main] rc-manager=resolvconf 修改resolvconf配置\n1 2 3 nano /etc/resolvconf.conf # 添加 name_servers=\u0026#34;114.114.114.114 8.8.8.8\u0026#34; 重启NetworkManager\n1 sudo systemctl restart NetworkManager 获取时间 1 2 3 date # 格式化输出 date +\u0026#34;%F\u0026#34; 日期 1 2 3 4 5 6 7 8 9 10 %D # mm/dd/yy 格式 %F # yyyy-mm-dd 格式 %a # 日期名称，缩写为 Mon、Tue、Wed 等 %A # 当天的全称，周一周二周三等 %u # 星期几，其中星期一=1，星期二=2，星期三=3，依此类推。 %w # 星期几，星期日=0，星期一=1，星期二=2，依此类推。 %d # 月份中的第几天，带有前导零（01、02 … 09）。 %e # 月份中的第几天，带有前导空格（‘1’、‘2’……‘9’）。 %j # 一年中的第几天，最多有两个前导零。 时间 1 2 3 4 %T # HH:MM:SS 格式，24小时制 %R # HH:MM 格式，24小时制 %r # 12 小时制 %X # 24 小时制，根据语言环境 常用第三方软件/命令行 终端下载github release文件 获取release文件下载链接（替换链接中内容）\n1 curl -s https://api.github.com/repos/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO\u0026gt;/releases/latest | grep browser_download_url | awk \u0026#39;BEGIN{FS=\u0026#34;\\\u0026#34;\u0026#34;} {print $4}\u0026#39; 下载文件\n1 wget -O \u0026lt;SAVE_FILE_NAME\u0026gt; \u0026lt;URL\u0026gt; pdf编辑 pdf分割 pdf每页一个文件\n1 qpdf input1.pdf --split-pages 每两页一个文件\n1 qpdf input1.pdf --split-pages=2 pdf合并 保留其中一个文件的信息\n1 qpdf input1.pdf --pages input2.pdf -- ouput.pdf 从新文件开始合并\n1 qpdf --empty --pages input1.pdf input2.pdf -- output.pdf pdf选取某几页 一个范围\n1 qpdf --empty --pages input.pdf 3-5 -- output.pdf 某几页\n1 qpdf --empty --pages input.pdf 1,3,5 -- output.pdf 倒数几页\n1 qpdf --empty --pages input.pdf r3-r1 --output.pdf 逆序\n1 qpdf --empty --pages input.pdf 5-3 -- output.pdf 奇偶页（需qpdf 9以上版本），该奇偶页为最终排序的奇偶页，非原始文件的奇偶页\n1 qpdf --empty --pages input.pdf 1-5:even -- output.pdf 页面旋转 逆时针90度\n1 qpdf input.pdf --rotate=+90 -- output.pdf 顺时针90度\n1 qpdf input.pdf --rotate=-90 -- output.pdf 重复使用主文件 1 qpdf input.pdf --pages input2.pdf . -- output.pdf 文件格式转换 使用pandoc\n1 pandoc input.md -f markdown -t html -s -o output.html -f markdown -\u0026gt; 输入文件格式 (可根据输入文件后缀猜测省略 -t html -\u0026gt; 输出文件格式 (可根据输出文件后缀猜测省略 -s -\u0026gt; 输出为单文件 -o FILENAME -\u0026gt; 输出文件名字\n修复桌面环境 无法进入桌面(uos)\n重新安装桌面环境\n1 apt install dde startdde 键盘映射 软件 evtest udevadm\n获取键盘信息及按键scanid 1 2 3 4 5 6 7 8 9 10 11 $ evtest # 输入键盘对应的数字 Input device ID: bus 0x3 vendor 0x1a2c product 0x7f07 version 0x110 Input device name: \u0026#34;SEMICO USB Gaming Keyboard \u0026#34; # 记录信息 # 按下按键 Event: time 1715308057.759600, type 4 (EV_MSC), code 4 (MSC_SCAN), value 700e2 Event: time 1715308057.759600, type 1 (EV_KEY), code 56 (KEY_LEFTALT), value 0 # 记录value对应的值 # usb键盘的scanid应当为5位16进制数字 修改按键 1 2 3 cd /etc/udev/hwdb.d/ touch \u0026lt;num\u0026gt;-\u0026lt;word\u0026gt;.hwdb # 数字-名称 # 编辑该文件 1 2 3 4 5 6 7 8 9 10 11 evdev:input:b\u0026lt;bus_id\u0026gt;v\u0026lt;vendor_id\u0026gt;p\u0026lt;product_id\u0026gt;e\u0026lt;version_id\u0026gt;* # 每一个id都需要补足到4位，如bus 0x3，则补为b0003 # 16进制的字母大写 # 如：evdev:input:b0003v1A2Cp7F07e0100* # 也可以用通配符*代替某些字段，只要能匹配到键盘就行 KEYBOARD_KEY_\u0026lt;scan_id\u0026gt;=\u0026lt;key_name\u0026gt; # 前面有空格 # key_name可以从 https://hal.freedesktop.org/quirk/quirk-keymap-list.txt 中找 # 如： KEYBOARD_KEY_70029=grave # 中间不能有注释、空行 生效 1 2 sudo udevadm hwdb --update sudo udevadm trigger 请注意，修改生效后，无法删除，只能重启电脑恢复。\nscrcpy 常用参数\n1 2 3 4 -m # 分辨率 -b # 码率 -Sw # 黑屏启动 -V # 通知等级 info warn error 发送邮件 使用mailx命令行，msmtp后端，确保都安装了。\n设置msmtp配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 nano ~/.msmtprc # 添加 defaults tls on tls_trust_file /etc/ssl/certs/ca-certificates.crt account default host smtp.163.com port 25 auth on user USER_NAME@163.com password USER_PASSWORD from SEND_USER_NAME@163.com 修改mailx配置\n1 2 3 4 nano /etc/mail.rc # 添加 set mta=/usr/bin/msmtp # 使用msmtp发邮件 unset save # 发送失败时取消保存dead.letter 发送文件\n1 echo \u0026#34;SEND_CONTENT\u0026#34; | mailx -s \u0026#34;TITLE\u0026#34; \u0026#34;TO_EMAIL_URL\u0026#34; 同步文件 1 rsync src/ target/ -r 递归进目录 -u 更新模式 -a 归档模式 -delate 从target中删除src里没有的文件 -n 不实际运行，用于delate前检查 -v 详细信息 \u0026ndash;progress 传输进度 \u0026ndash;info=progress2 总体传输进度 \u0026ndash;max-size 文件最大限制 \u0026ndash;exclude 排除路径 \u0026ndash;exclude-from 从文件中获取排除的路径 \u0026ndash;include 包含路径 \u0026ndash;include-from 从文件中获取包含的路径 常用方式 1 2 3 4 5 6 7 8 # 更新同步 rsync -ru --info=progress2 /src/ /target/ # 黑名单同步 rsync --exclude-from=\u0026#34;./exclude.txt\u0026#34; /src/ /target/ # 白名单同步 rsync --include-from=\u0026#34;./include.txt\u0026#34; --exclude=\u0026#34;*.*\u0026#34; /src/ /target/ 修复nginx模块版本不正确 获取必要信息 yay缓存的模块代码路径：~/.cache/yay/\u0026lt;PKG_NAME\u0026gt;，此处我的dav扩展模块的路径为：/home/\u0026lt;USER\u0026gt;/.cache/yay/nginx-mainline-mod-dav-ext/src/nginx-dav-ext-module-3.0.0\nnginx源码的路径：/usr/src/nginx/\n获取原先的nginx配置选项，configure arguments: 后的所有内容都复制下来\n1 nginx -V 备份原来的nginx与模块\n1 2 3 4 mv /usr/bin/nginx /usr/bin/nginx.old # mv /usr/sbin/nginx /usr/sbin/nginx.old # mv /bin/nginx /bin/nginx.old mv /usr/lib/nginx/modules/ngx_http_dav_ext_module.so /usr/lib/nginx/modules/ngx_http_dav_ext_module.so.old 编译 root 或 sudo\n1 2 3 4 5 cd /usr/src/nginx/ ./configure \u0026#34;str\u0026#34; --with-compat --add-dynamic-module=\u0026#34;url\u0026#34; # 这里的\u0026#34;str\u0026#34;是前面复制的configure arguments # 这里的\u0026#34;url\u0026#34;是前面模块的源码路径 make 编译结果在/usr/src/nginx/objs\n启用 root 或 sudo\n1 2 3 4 5 6 cp /usr/src/nginx/objs/nginx /usr/bin/nginx # cp /usr/src/nginx/objs/nginx /usr/sbin/nginx # cp /usr/src/nginx/objs/nginx /bin/nginx cp /usr/src/nginx/objs/ngx_http_dav_ext_module.so /usr/lib/nginx/modules/ngx_http_dav_ext_module.so systemctl restart nginx heic图片转换 安装libheif库\n1 2 3 for file in *.heic ; then heif-convert $file ${file/#.heic/.jpg} done 判断rsa私钥公钥是否一致 1 2 3 ssh-keygen -y -f \u0026lt;key\u0026gt; \u0026gt; temp.id_rsa.pub # 生成公钥临时文件 md5sum temp.id_rsa.pub \u0026lt;pubkey\u0026gt; # 比对md5值 rm temp.id_rsa.pub # 删除临时文件 ","date":"2023-05-06T00:34:45+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/linux%E7%9A%84%E4%B8%80%E4%BA%9Btips/","title":"Linux的一些tips"},{"content":"所用的软件 Office Tool Plus选择框架版（有.NET6.0的可以使用无框架的版本）。\n安装 部署 打开Office Tool Plus，进入部署选项页。\n点击添加产品，选择所需的软件版本，我选择了office365企业应用版（但我用的是我微软账户的2019家庭学生版，所以这项其实可以选2019家庭学生版）与visio专业版2021（这是我写论文所需）。\n添加完成后，在下方选择需要的应用，不需要就关闭选项即可。\n在部署Office中打开下载后再部署开关，其他都不修改。\n点开始部署，等待软件自己安装完成。\n激活 进入激活选项页。\n先清除已有的许可证。\n我微软账户有office2019家庭学生，所以word四件套我直接登录账号即可。\n点击安装许可证，选择visio专业版2021（和上面安装的版本一致），等待其运行完成即可。\n完成 这个软件有新手帮助，出问题可以直接寻找。\n","date":"2023-04-11T20:26:59+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/ms-office-%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB/","title":"Ms Office 安装激活"},{"content":"前言 本文都是从网上找来的，我也是从零开始使用的，不建议完全相信，当你可以试试嘛，对吧。\n介绍 hugo是一个轻量级的使用markdown语法的静态博客网站。我因为不想用nodejs之类的部署，所以没有选用hexo等其他的博客，选择了这个用go写的。我不确定哪个性能好，反正随便用嘛。\n如果有其他语言的我有可能转去其他的，毕竟我完全不会go语言。python，rust都可以捏。\n目前用下来，我不用关心任何go语言相关的东西，所有的修改都是直接修改markdown，比较省心。\n官方介绍 Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n安装 没写呢，有空再写吧，反正网上有教程。\n1 ... 文件树 从theme中复制exampleSite内的模板文件到根目录中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 . ├── archetypes # 自定义覆盖主题，通常用于hugo new的文件 ├── assets # 自定义覆盖主题静态资源 ├── layouts # 自定义覆盖主题模板文件 ├── content # 内容 │ ├── categories # 归档，自动生成的不用管 │ ├── _index.md # 不用管 │ ├── page # 页面，里面每个文件夹都是左侧的选项 │ │ ├── about # 关于页面 │ │ ├── archives # 归档页面 │ │ ├── links # 链接页面 │ │ └── search # 搜索页面 │ └── post # 文章 │ └── \u0026lt;file\u0026gt; # 每个文件夹都是一篇文章 ├── public # 发布文件夹，里面就是静态文件，可以部署到其他网站 ├── resources # 自动生成文件 ├── themes # 主题文件夹，可被根目录下的文件覆盖 └── config.yaml # 配置文件 hugo命令 build 生成的静态文件在public文件夹下\n1 hugo 启动测试服务器 1 hugo server -b http://访问地址/ --bind 监听地址 访问地址我设置的自己的局域网ip。\n监听地址设置的0.0.0.0，这样可以通过其他设备访问。\n端口默认1313。\n可以通过--config选项指定使用的config文件。\n新建文件 1 hugo new post/Markdown文件名/index.md 配置 配置文件为\n1 2 3 /config.yaml 或 /config.toml 文件路径（默认页面）：\n1 ./content/post/Markdown文件名/index.md 中文页面\n1 ./content/post/Markdown文件名/index.zh-cn.md 图片等路径：\n1 ./content/post/Markdown文件名/文件名 配置文件内容 从exampleSite中复制config.yaml到根目录中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 # 全局配置 baseurl: http://0.0.0.0:1313 # 绑定的url，测试服务器会无视该项。 theme: hugo-theme-stack # 主题，要在themes文件夹中 title: xxxx # 默认标题栏 enableEmoji: true # 开启emoji表情支持 # 语言配置 DefaultContentLanguage: zh-cn # 默认语言 languageCode: zh-cn # 不知道有啥用 hasCJKLanguage: true # 启用CJK，有中日韩语的要打开。 languages: # 若只有一个语言，就不显示切换语言的按钮。 zh-cn: # 启用的语言 languageName: 中文 # 语言名字，显示在切换语言中 title: xxx # 标题 description: xxx # 描述 weight: 1 # 语言的显示顺序 # en: # # languageName: English # 同上 # title: xxx # description: xxx # weight: 2 # 外观配置 params: mainSections: # 主页显示哪个 - post featuredImageField: image rssFullContent: true favicon: /favicon.ico # 网站图标，位于 /static/favicon.ico footer: # 脚标，每个页面的最下方都有这个。 since: 2023 customText: XXX dateFormat: # 时间相关，不要更改。 published: Jan 02, 2006 lastUpdated: Jan 02, 2006 15:04 MST sidebar: # 左侧边栏 emoji: 🌞 # 头像右下角的emoji subtitle: XXX # 头像下方的描述 avatar: # 头像 enabled: true local: true src: img/xxx.jpg # 位于 /assets/img/xxx.jpg article: # 文章配置的全局开关 math: false # 全局启用数学公式 toc: true # 不知道 readingTime: true # 全局启用预计阅读时间 license: enabled: true default: Licensed under CC BY-NC-SA 4.0 widgets: # 主页右侧组件 homepage: # 调整位置可排序 - type: search # 搜索 - type: categories # 归档 params: limit: 10 # 显示数量 - type: tag-cloud # 标签云 params: limit: 10 # 显示数量 直接在theme的示例里复制config文件是最好的。\n文件头 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 --- title: \u0026#34;标题\u0026#34; description: \u0026#34;描述\u0026#34; auther: \u0026#34;作者\u0026#34; # 貌似不显示 date: \u0026#34;年-月-日T时:分:秒+08:00\u0026#34; categories: - 分类 tags: - 标签 series: - 系列 license: 开源协议 image: 头图 # 放在同一个文件夹内，就直接写文件名 math: 数学公式 # 好像没啥用 hidden: false # 是否隐藏 comments: false # 是否开启评论，这个配置文件里开了才有用。 draft: false # 是否是草稿 links: # 底部链接 - title: 标题 description: 描述 website: url # 链接地址 image: url # 图片地址 --- 放在文件开头。\n默认文件模板\n1 /archetypes/default.md markdown语法 标题 1 2 3 4 # H1 (不显示在目录中，建议全文只用一个) ## H2 ### H3 #### H4 换行 行1\n行2\n1 2 文本 后面跟两个空格 强调 粗体\n1 **粗体** 斜体\n1 *斜体* 粗体和斜体\n1 ***粗体和斜体*** 重点标注\n1 `文本` *删除线 删除线\n1 ~~删除线~~ 引用 content # 后面要有两个空格\ncontent\n\u0026hellip;\n1 2 3 \u0026gt; content # 后面要有两个空格 \u0026gt; content \u0026gt; ... 嵌套引用\n图片 1 2 3 4 ![图片说明1](图片路径，放在md文件的同级文件夹中最好) ![图片说明2](图片路径) # 不空行则图片在同一行，空一行则图片另起一行 ![图片说明3](图片路径) 链接 链接\n1 [链接内容](链接 \u0026#34;悬浮文字\u0026#34;) 引用类型链接\n能使文本更紧凑，把较长的链接放在统一的不相关的地方，如段落后或者文章结尾。\n一行文本字符\n1 2 3 4 第一部分 [文本][label] 第二部分，放在哪都行 [label]: http://blog.chenxi-eumenides.top:81/\u0026gt; \u0026#34;出处\u0026#34; 网址和邮箱 chenxi@test.com\nhttp://blog.chenxi-eumenides.top:81/\n1 2 \u0026lt;chenxi@test.com\u0026gt; \u0026lt;http://blog.chenxi-eumenides.top:81/\u0026gt; 上下分隔线 1 2 3 *** 或者 --- 列表 有序列表\none two 1 2 1. one 2. two 无序列表\none two 1 2 - one - two 嵌套则增加4个空格/制表符\n*定义列表 术语 描述1 描述2 1 2 3 术语 : 描述1 : 描述2 *任务列表 勾选 没勾选 1 2 - [x] 勾选 - [ ] 没勾选 *围栏代码块 ```编程语言名\n这段文字就是在围栏代码块中。\n```\n1 这段文字就是在围栏代码块中。 *表格 Tables Are Cool col 1 is left-aligned $1600 col 2 is centered $12 col 3 is right-aligned $1 1 2 3 4 5 | Tables | Are | Cool | | ------ | :---: | ---: |# - 三个及三个以上 | col 1 is | left-aligned | $1600 | | col 2 is | centered | $12 | | col 3 is | right-aligned | $1 | 两边冒号为居中\n右边冒号为居右\n左边冒号为居左\n转义 *不斜体*\n1 \\*不斜体\\* *Emoji \u0026#x1f648; 😈\n1 :see_no_evil: 😈 可以用Emoji cheat sheet网站中的shortcode插入emoji表情，或者直接输入emoji表情。\n*数学公式 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ 全局启用：在config.yaml中修改params.article.math为true。\n单文件启用：在文件头中修改math为true。\n特殊代码 hugo 提供了几种短代码来插入内容。\n以及具有隐私配置和一组简单捷径的长代码，支持各种社交的静态和非JS版本.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { {\u0026lt; CODE_NAME ARGS \u0026gt;}} # 我不知道为什么hugo一定要把代码块内部的短代码 # 渲染出来，导致我构建时一直出问题。所以我在两 # 个{中间加了一个空格，使用时请删除这个空格。 # 二维码 { {\u0026lt; qr text=\u0026#34;CONTENT\u0026#34; /\u0026gt;}} # e.t. text=\u0026#34;blog.chenxi-eumenides.top:81\u0026#34; # 本地、远程视频文件 { {\u0026lt; video src=VIDEO_URL autoplay=\u0026#34;true\u0026#34; poster=COVER_URL \u0026gt;}} # video file # src=\u0026#34;VIDEO_URL\u0026#34; autoplay=\u0026#34;true\u0026#34; poster=\u0026#34;COVER_URL\u0026#34; # B站视频 { {\u0026lt; bilibili VIDEO_ID PART_NUMBER \u0026gt;}} # https://www.bilibili.com/video/VIDEO_ID?p=PART_NUMBER # 腾讯视频 { {\u0026lt; tencent VIDEO_ID \u0026gt;}} # # 油管视频 { {\u0026lt; youtube VIDEO_ID \u0026gt;}} # https://www.youtube.com/watch?v=VIDEO_ID # Vimeo视频 { {\u0026lt; vimeo_simple VIDEO_ID \u0026gt;}} # # X推文 { {\u0026lt; x user=\u0026#34;USER_NAME\u0026#34; id=\u0026#34;POST_ID\u0026#34; \u0026gt;}} # # Gitlab代码片段 { {\u0026lt; gitlab CODE_ID \u0026gt;}} # 插入Quote Stack adds a quote shortcode. For example:\nContent\n― A famous person, The book they wrote 1 Content\n― A famous person, The book they wrote *脚注 一行文字1。前方有文本就会变成上标。\n1 2 [^label]label是什么不会影响显示的数字，只是用来标记。 [^label]: 脚注内容 脚注内容，自动放置在文章末尾\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-04-03T19:03:56+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/hugo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%E4%B8%8Emarkdown%E8%AF%AD%E6%B3%95/","title":"hugo安装、配置、命令与markdown语法"},{"content":"用ffmpeg在B站上自动直播 AK在B站上的视频教程\nB站上的一篇文字基础教程\n进阶的内容\n","date":"2023-01-29T08:26:18+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E7%94%A8ffmpeg%E5%9C%A8b%E7%AB%99%E4%B8%8A%E7%9B%B4%E6%92%AD/","title":"用ffmpeg在B站上直播"},{"content":"前言 本文基本来至oh-my-zsh官网\n安装 zsh 系统为manjaro,直接pacman安装zsh\n1 pacman -Sy zsh 在/etc/passwd中修改root和用户的默认shell为/bin/zsh。\n重启终端即可。\noh-my-zsh 前往官网复制安装命令，一键安装。\n以下二选一即可。\n1.使用curl\n1 sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 2.使用wget\n1 sh -c \u0026#34;$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\u0026#34; 配置 oh-my-zsh会自动替换.zshrc文件。\nalias alias就是命令的简写方式\n格式为alias short_command='long_command'\n在.zshrc文件尾添加alias,也可以在.zshrc文件尾添加source .zsh_alias，然后创建.zsh_alias文件，在这其中添加alias。\n插件 在github上可以看到多个插件，点进去，找到INSTALL.md链接，找到oh-my-zsh的安装命令，在终端中运行。\n在.zshrc文件中的plugin一项中，添加刚下载的插件名称即可。\n主题 去官网可以找到所有的主题，在更改theme变量为所要的主题名。\n更新配置 刚写完的配置是不会启用的，手动启用一次，或者打开新的终端就能使用了\n1 source .zshrc ","date":"2023-01-29T05:02:30+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/oh-my-zsh%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/","title":"oh-my-zsh安装及配置"},{"content":"mc 测试\n","date":"2023-01-29T05:02:30+08:00","permalink":"http://blog.chenxi-eumenides.top:81/p/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8Cminecraft%E5%BC%80%E6%9C%8D/","title":"我的世界Minecraft开服"}]